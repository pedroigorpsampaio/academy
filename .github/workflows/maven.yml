# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven
run-name: Docker build and push to "${{ inputs.environment }}"

on:
 # push:
 #   branches: [ "main" ]
 # pull_request:
 #   branches: [ "main" ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag'
        type: string
        required: true
      environment:
        description: 'Environment to run tests against'
        required: true
        default: Test
        type: choice
        options:
          - Test
          - Int
          - E2E
          - Prod

env:
    image_name: academy
    tag_name: ${{inputs.tag}}:${{inputs.environment}}
    artifact_name: artifact-cicd

jobs:
  build:

    runs-on: ubuntu-latest

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: academy
          POSTGRES_PASSWORD: academy
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      uses: ./.github/actions/maven_build

    - name: Build docker image
      uses: ./.github/actions/docker_build
      with:
        image_name: $image_name
        tag_name: $tag_name

    - name: Save docker image
      run: docker save -o "${{ env.image_name }}.tar" ${{env.image_name}}:${{env.tag_name}}

    - uses: actions/upload-artifact@v4
      name: Upload docker image
      with:
        name: $artifact_name
        path: "${{env.image_name}}.tar"

  test:

    runs-on: ubuntu-latest

    needs: build

    environment: ${{ inputs.environment }}

    steps:
    - uses: actions/checkout@v4

    - name: Download docker image
      uses: actions/download-artifact@v4
      with:
        name: $artifact_name

    - name: Load image
      run: docker load -i "${{ env.image_name }}.tar"

    - name: List docker images
      run: docker image ls

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Image to Docker Hub
      uses: ./.github/actions/docker_push
      with:
        docker_username: ${{ secrets.DOCKERHUB_USERNAME }}
        docker_image: ${{env.image_name}}:${{ env.tag_name}}
